pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'sonar-qube'
        SONAR_SCANNER = 'sonarqube'
        POSTGRES_DB = "${env.POSTGRES_DB}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/CristianHin/server-reports.git'
            }
        }

        stage('Install dependencies') {
            steps {
                script {
                    sh 'npm i'
                }
            }
        }

        stage('Install prisma client') {
            steps {
                script {
                    sh 'npx prisma generate'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh 'npm run test:cov'
                }
            }
        }

        stage('SonarQube Scan') {
            steps {
                script {
                    def scanner = tool SONAR_SCANNER
                    def projectKey = env.JOB_NAME
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh """echo "sonar.projectKey=${projectKey}" >> sonar-project.properties
                        ${scanner}/bin/sonar-scanner"""
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }

        stage('Create .env file') {
            steps {
                script {
                    sh '''
                    echo "DATABASE_URL=${POSTGRES_DB}" > .env
                    echo "NODE_ENV=production" >> .env
                    '''
                }
            }
        }

        stage('Build Microservice') {
            steps {
                script {
                    sh """
                    npm run build
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def projectKey = env.JOB_NAME
                    def projectNumber = env.BUILD_NUMBER
                    sh """
                    docker build -t ${projectKey}:${projectNumber} .
                    """
                }
            }
        }

        stage('Deploy Docker Container') {
            steps {
                script {
                    def projectKey = env.JOB_NAME
                    def projectNumber = env.BUILD_NUMBER
                    def containerName = "${projectKey}-container"
                    sh """
                    if [ \$(docker ps -a -q -f name=${containerName}) ]; then
                        docker stop ${containerName}
                        docker rm ${containerName}
                    fi
                    """
                    sh """
                    docker run -d --name ${containerName} --network microservices -p 9090:9090 ${projectKey}:${projectNumber}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
